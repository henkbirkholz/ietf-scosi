<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.26 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-birkholz-sacm-coswid-00" category="info">

  <front>
    <title abbrev="COSWID">Concise Software Identifiers</title>

    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
      <address>
        <postal>
          <street>Rheinstrasse 75</street>
          <city>Darmstadt</city>
          <code>64295</code>
          <country>Germany</country>
        </postal>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="J." surname="Fitzgerald-McKay" fullname="Jessica Fitzgerald-McKay">
      <organization abbrev="DOD">Department of Defense</organization>
      <address>
        <postal>
          <street>9800 Savage Road</street>
          <city>Ft. Meade</city>
          <region>Maryland</region>
          <country>USA</country>
        </postal>
        <email>jmfitz2@nsa.gov</email>
      </address>
    </author>
    <author initials="C." surname="Schmidt" fullname="Charles Schmidt">
      <organization abbrev="MITRE">The MITRE Corporation</organization>
      <address>
        <postal>
          <street>202 Burlington Road</street>
          <city>Bedford</city>
          <region>Maryland</region>
          <code>01730</code>
          <country>USA</country>
        </postal>
        <email>cmschmidt@mitre.org</email>
      </address>
    </author>
    <author initials="D." surname="Waltermire" fullname="David Waltermire">
      <organization abbrev="NIST">National Institute of Standards and Technology</organization>
      <address>
        <postal>
          <street>100 Bureau Drive</street>
          <city>Gaithersburg</city>
          <region>Maryland</region>
          <code>20877</code>
          <country>USA</country>
        </postal>
        <email>david.waltermire@nist.gov</email>
      </address>
    </author>

    <date year="2016" month="March" day="20"/>

    <area>Security</area>
    <workgroup>SACM Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a concise representation of ISO 19770-2:2015 Software Identifiers (SWID tags) that is interoperable with the XML schema definition of ISO 19770-2:2015.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>SWID tags have several applications including but not limited to:</t>

<t><list style="symbols">
  <t>Software Inventory Management, a part of the Software Asset Management <xref target="SAM"/> process, which requires an accurate list of discernible deployed software instances.</t>
  <t>Vulnerability Assessment, which requires a semantic link between standardized vulnerability descriptions and IT-assets.</t>
  <t>Remote Attestation, which requires a link between golden (well-known) measurements and software instances <xref target="I-D.birkholz-tuda"/>.</t>
</list></t>

<t>SWID tags, as defined in ISO-19770-2:2015 <xref target="SWID"/>, provide a standardized format for a record that identifies and describes a specific release of a software product. Different software products, and even different releases of a particular software product, each have a different SWID tag record associated with them. In addition to defining the format of these records, ISO-19770-2:2015 defines requirements concerning the SWID tag lifecycle. Specifically, when a software product is installed on an endpoint, that product’s SWID tag is also installed. Likewise, when the product is uninstalled or replaced, the SWID tag is deleted or replaced, as appropriate. As a result, ISO-19770-2:2015 describes a system wherin there is a correspondence between the set of installed software products on an endpoint, and the presence on that endpoint of the SWID tags corresponding to those products.</t>

<t>SWID tags are meant to be flexible and able to express a broad set of metadata about a software product. Moreover, there are multiple types of SWID tags, each providing different types of information. For example, a “media tag” is used to describe an application’s installation image on an installation media, while a “patch tag” is meant to describe a patch that modifies some other application. Therefore, the complete set of attributes or types of information elements that can be included in a SWID tag often exceeds the scope a single application of SWID.</t>

<t>This document defines a more concise representation of SWID tags in the Concise Binary Object Representation (CBOR) <xref target="RFC7049"/>.  This is described via the CBOR Data Definition Language (CDDL) <xref target="I-D.greevenbosch-appsawg-cbor-cddl"/>.  The resulting Concise SWID data definition is interoperable with the XML schema definition of ISO-19770-2:2015 <xref target="SWID"/>. The vocabulary, i.e., the CDDL names of the types and members used in the Concise SWID data definition, is mapped to more concise labels represented as small integers. The names used in the CDDL and the mapping to the CBOR representation using integer labels is based on the vocabulary of the attribute and element names defined in ISO-19770-2:2015.</t>

<t>In essence, XML SWID tags are not small, and the use of SWID tags in applications can cause a large amount of data to be transported, larger than may be acceptable for constrained devices. Concise SWID tags reduce the amount of data transported by using CBOR and maps human-readable labels of that content to more concise integer labels (indices).</t>

</section>
<section anchor="concise-swid-data-definition" title="Concise SWID data definition">

<t>This is a complete representation of the content of the ISO-19770-2:2015 <xref target="SWID"/> XML schema definition in CDDL. This representation includes all SWID tag fields and thus supports all SWID tag use cases. The CamelCase notation used in the XML schema definition is changed to hyphen-separated notation (e.g. ResourceCollection is named resource-collection in the Concise SWID data definition). The human-readable names of members are mapped to integer indices via a block of rules at the bottom of the Concise SWID data definition. 48 character strings of the SWID vocabulary that would have to be stored or transported in full if using the original vocabulary are replaced.</t>

<figure><artwork type="CDDL"><![CDATA[
software-identity = {
  global-attr,
  ? content,
  ? corpus,
  ? patch,
  ? media,
  name,
  ? supplemental,
  tag-id,
  ? tag-version,
  ? version,
  ? version-scheme,
}

NMTOKEN = text            ; .regexp to add some validation?
NMTOKENS = [* NMTOKEN]

any-attr = text
any-element = any

date-time = time
any-uri = uri

global-attr = (
  * (text => any-attr),
  ? lang,
)

meta-type = (
  global-attr,
  * (text => any-attr),
)

meta-element = [
  global-attr,
  * (text => any-attr),
]

resource-collection = (
  global-attr,
  * (directory-entry // file-entry // process-entry // resource-entry)
)

file = {
  filesystem-item,
  ? size,
  ? version,
  * (text => any-attr),
}

filesystem-item = (
  meta-type,
  ? key,
  ? location,
  name,
  ? root,
)

directory = {
  filesystem-item,
  path-elements,
}

process = {
  global-attr,
  name,
  ? pid,
}

resource = {
  global-attr,
  type,
}

entity = {
  global-attr,
  meta-elements,
  name,
  ? reg-id,
  role,
  ? thumbprint,
}

evidence = {
  global-attr,
  resource-collection,
  ? date,
  ? device-id,
}

link = {
  global-attr,
  ? artifact,
  href,
  ? media,
  ? ownership,
  rel,
  ? type,
  ? use,
}

software-meta = {
  global-attr,
  ? activation-status,
  ? channel-type,
  ? colloquial-version,
  ? description,
  ? edition,
  ? entitlement-data-required,
  ? entitlement-key,
  ? generator,
  ? persistent-id,
  ? product,
  ? product-family,
  ? revision,
  ? summary,
  ? unspsc-code,
  ? unspsc-version,
}

payload = {
  global-attr,
  resource-collection,
}

tag-id = (0: text)
name = (1: text)
content = (
  2: [ * entity / evidence / link / software-meta /
       payload / any-element ]
)
corpus = (3: bool)
patch = (4: bool)
media = (5: text)
supplemental = (6: bool)
tag-version = (7: integer)
version = (8: text)
version-scheme = (9: NMTOKEN)
lang = (10: text)
directory-entry = (11: directory)
file-entry = (12: file)
process-entry = (13: process)
resource-entry = (14: resource)
size = (15: integer)
key = (16: bool)
location = (17: text)
root = (18: text)
path-elements = (19: ([ * (directory / file) ]))
pid = (20: integer)
type = (21: text)
meta-elements = (22: ([ * meta-element ]))
reg-id = (23: any-uri)
role = (24: NMTOKENS)
thumbprint = (25: text)
date = (26: date-time)
device-id = (27: text)
artifact = (28: text)
href = (29: any-uri)
ownership = (30: ("shared" / "private" / "abandon"))
rel = (31: NMTOKEN)
use = (32: ("optional" / "required" / "recommended"))
activation-status = (33: text)
channel-type = (34: text)
colloquial-version = (35: text)
description = (36: text)
edition = (37: text)
entitlement-data-required = (38: bool)
entitlement-key = (39: text)
generator = (40: text)
persistent-id = (41: text)
product = (42: text)
product-family = (43: text)
revision = (44: text)
summary = (45: text)
unspsc-code = (46: text)
unspsc-version = (47: text)

]]></artwork></figure>

</section>
<section anchor="cose-signatures-for-concise-swid-tags" title="COSE signatures for Concise SWID tags">

<t>Concise SWID tags require a different signature scheme than the ISO SWID tags represented via the XML schema definition. COSE provides the required mechanism [COSE], which will result in additional attributes to be included in the general Concise SWID data definition, e.g. signature-type (“compat”, “cose”, etc.).</t>

</section>
<section anchor="iana-considerations" title="IANA considerations">

<t>This document will include requests to IANA: Integer indices for SWID content attributes and information elements.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>TODO There are: validation, denial of service, counterfeit, etc.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

</section>
<section anchor="change-log" title="Change Log">

<t>First version -00</t>

</section>
<section anchor="contributors" title="Contributors">

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC7049' target='http://www.rfc-editor.org/info/rfc7049'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='2013' month='October' />
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.  These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t></abstract>
</front>
<seriesInfo name='RFC' value='7049'/>
<seriesInfo name='DOI' value='10.17487/RFC7049'/>
</reference>


<reference anchor="SAM" >
  <front>
    <title>Information technology - Software asset management - Part 5: Overview and vocabulary</title>
    <author >
      <organization></organization>
    </author>
    <date year="2013" month="November" day="15"/>
  </front>
  <seriesInfo name="ISO/IEC" value="19770-5:2013"/>
</reference>
<reference anchor="SWID" >
  <front>
    <title>Information technology - Software asset management - Part 2: Software identification tag'</title>
    <author >
      <organization></organization>
    </author>
    <date year="2015" month="October" day="01"/>
  </front>
  <seriesInfo name="ISO/IEC" value="19770-2:2015"/>
</reference>


    </references>

    <references title='Informative References'>





<reference anchor='I-D.greevenbosch-appsawg-cbor-cddl'>
<front>
<title>CBOR data definition language (CDDL): a notational convention to express CBOR data structures</title>

<author initials='C' surname='Vigano' fullname='Christoph Vigano'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='October' day='18' year='2015' />

<abstract><t>This document proposes a notational convention to express CBOR data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-greevenbosch-appsawg-cbor-cddl-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-greevenbosch-appsawg-cbor-cddl-07.txt' />
</reference>



<reference anchor='I-D.birkholz-tuda'>
<front>
<title>Time-Based Uni-Directional Attestation</title>

<author initials='A' surname='Fuchs' fullname='Andreas Fuchs'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='I' surname='McDonald' fullname='Ira McDonald'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<date month='October' day='19' year='2015' />

<abstract><t>This memo documents the method and bindings used to conduct time- based unidirectional attestation between distinguishable endpoints over the network.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-birkholz-tuda-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-birkholz-tuda-00.txt' />
</reference>




    </references>


<!--  LocalWords:  SWID verifier TPM filesystem
 -->



  </back>
</rfc>

